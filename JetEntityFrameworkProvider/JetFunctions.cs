//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generation date and time : 19/11/2014 19:32:02.9772277
//
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace JetEntityFrameworkProvider
{
    /// <summary>
    /// Contains function stubs that expose Jet methods in Linq to Entities.
    /// </summary>
    public static class JetFunctions
    {
        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Byte? JetFirst(this IEnumerable<System.Byte> arg)
        {
            ObjectQuery<System.Byte> objectQuerySource = arg as ObjectQuery<System.Byte>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Byte?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Byte? JetFirst(this IEnumerable<System.Byte?> arg)
        {
            ObjectQuery<System.Byte?> objectQuerySource = arg as ObjectQuery<System.Byte?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Byte?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Int16? JetFirst(this IEnumerable<System.Int16> arg)
        {
            ObjectQuery<System.Int16> objectQuerySource = arg as ObjectQuery<System.Int16>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int16?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Int16? JetFirst(this IEnumerable<System.Int16?> arg)
        {
            ObjectQuery<System.Int16?> objectQuerySource = arg as ObjectQuery<System.Int16?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int16?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Int32? JetFirst(this IEnumerable<System.Int32> arg)
        {
            ObjectQuery<System.Int32> objectQuerySource = arg as ObjectQuery<System.Int32>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int32?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Int32? JetFirst(this IEnumerable<System.Int32?> arg)
        {
            ObjectQuery<System.Int32?> objectQuerySource = arg as ObjectQuery<System.Int32?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int32?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Int64? JetFirst(this IEnumerable<System.Int64> arg)
        {
            ObjectQuery<System.Int64> objectQuerySource = arg as ObjectQuery<System.Int64>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int64?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Int64? JetFirst(this IEnumerable<System.Int64?> arg)
        {
            ObjectQuery<System.Int64?> objectQuerySource = arg as ObjectQuery<System.Int64?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int64?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Decimal? JetFirst(this IEnumerable<System.Decimal> arg)
        {
            ObjectQuery<System.Decimal> objectQuerySource = arg as ObjectQuery<System.Decimal>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Decimal?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Decimal? JetFirst(this IEnumerable<System.Decimal?> arg)
        {
            ObjectQuery<System.Decimal?> objectQuerySource = arg as ObjectQuery<System.Decimal?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Decimal?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Double? JetFirst(this IEnumerable<System.Double> arg)
        {
            ObjectQuery<System.Double> objectQuerySource = arg as ObjectQuery<System.Double>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Double?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Double? JetFirst(this IEnumerable<System.Double?> arg)
        {
            ObjectQuery<System.Double?> objectQuerySource = arg as ObjectQuery<System.Double?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Double?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Single? JetFirst(this IEnumerable<System.Single> arg)
        {
            ObjectQuery<System.Single> objectQuerySource = arg as ObjectQuery<System.Single>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Single?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Single? JetFirst(this IEnumerable<System.Single?> arg)
        {
            ObjectQuery<System.Single?> objectQuerySource = arg as ObjectQuery<System.Single?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Single?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.DateTime? JetFirst(this IEnumerable<System.DateTime> arg)
        {
            ObjectQuery<System.DateTime> objectQuerySource = arg as ObjectQuery<System.DateTime>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.DateTime?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.DateTime? JetFirst(this IEnumerable<System.DateTime?> arg)
        {
            ObjectQuery<System.DateTime?> objectQuerySource = arg as ObjectQuery<System.DateTime?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.DateTime?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.TimeSpan? JetFirst(this IEnumerable<System.TimeSpan> arg)
        {
            ObjectQuery<System.TimeSpan> objectQuerySource = arg as ObjectQuery<System.TimeSpan>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.TimeSpan?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.TimeSpan? JetFirst(this IEnumerable<System.TimeSpan?> arg)
        {
            ObjectQuery<System.TimeSpan?> objectQuerySource = arg as ObjectQuery<System.TimeSpan?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.TimeSpan?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.DateTimeOffset? JetFirst(this IEnumerable<System.DateTimeOffset> arg)
        {
            ObjectQuery<System.DateTimeOffset> objectQuerySource = arg as ObjectQuery<System.DateTimeOffset>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.DateTimeOffset?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.DateTimeOffset? JetFirst(this IEnumerable<System.DateTimeOffset?> arg)
        {
            ObjectQuery<System.DateTimeOffset?> objectQuerySource = arg as ObjectQuery<System.DateTimeOffset?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.DateTimeOffset?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.String JetFirst(this IEnumerable<System.String> arg)
        {
            ObjectQuery<System.String> objectQuerySource = arg as ObjectQuery<System.String>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.String>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.FIRST
        /// </summary>
        [DbFunctionAttribute("Jet", "FIRST")]
        public static System.Byte[] JetFirst(this IEnumerable<System.Byte[]> arg)
        {
            ObjectQuery<System.Byte[]> objectQuerySource = arg as ObjectQuery<System.Byte[]>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Byte[]>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Byte? JetLast(this IEnumerable<System.Byte> arg)
        {
            ObjectQuery<System.Byte> objectQuerySource = arg as ObjectQuery<System.Byte>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Byte?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Byte? JetLast(this IEnumerable<System.Byte?> arg)
        {
            ObjectQuery<System.Byte?> objectQuerySource = arg as ObjectQuery<System.Byte?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Byte?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Int16? JetLast(this IEnumerable<System.Int16> arg)
        {
            ObjectQuery<System.Int16> objectQuerySource = arg as ObjectQuery<System.Int16>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int16?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Int16? JetLast(this IEnumerable<System.Int16?> arg)
        {
            ObjectQuery<System.Int16?> objectQuerySource = arg as ObjectQuery<System.Int16?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int16?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Int32? JetLast(this IEnumerable<System.Int32> arg)
        {
            ObjectQuery<System.Int32> objectQuerySource = arg as ObjectQuery<System.Int32>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int32?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Int32? JetLast(this IEnumerable<System.Int32?> arg)
        {
            ObjectQuery<System.Int32?> objectQuerySource = arg as ObjectQuery<System.Int32?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int32?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Int64? JetLast(this IEnumerable<System.Int64> arg)
        {
            ObjectQuery<System.Int64> objectQuerySource = arg as ObjectQuery<System.Int64>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int64?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Int64? JetLast(this IEnumerable<System.Int64?> arg)
        {
            ObjectQuery<System.Int64?> objectQuerySource = arg as ObjectQuery<System.Int64?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int64?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Decimal? JetLast(this IEnumerable<System.Decimal> arg)
        {
            ObjectQuery<System.Decimal> objectQuerySource = arg as ObjectQuery<System.Decimal>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Decimal?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Decimal? JetLast(this IEnumerable<System.Decimal?> arg)
        {
            ObjectQuery<System.Decimal?> objectQuerySource = arg as ObjectQuery<System.Decimal?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Decimal?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Double? JetLast(this IEnumerable<System.Double> arg)
        {
            ObjectQuery<System.Double> objectQuerySource = arg as ObjectQuery<System.Double>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Double?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Double? JetLast(this IEnumerable<System.Double?> arg)
        {
            ObjectQuery<System.Double?> objectQuerySource = arg as ObjectQuery<System.Double?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Double?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Single? JetLast(this IEnumerable<System.Single> arg)
        {
            ObjectQuery<System.Single> objectQuerySource = arg as ObjectQuery<System.Single>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Single?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Single? JetLast(this IEnumerable<System.Single?> arg)
        {
            ObjectQuery<System.Single?> objectQuerySource = arg as ObjectQuery<System.Single?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Single?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.DateTime? JetLast(this IEnumerable<System.DateTime> arg)
        {
            ObjectQuery<System.DateTime> objectQuerySource = arg as ObjectQuery<System.DateTime>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.DateTime?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.DateTime? JetLast(this IEnumerable<System.DateTime?> arg)
        {
            ObjectQuery<System.DateTime?> objectQuerySource = arg as ObjectQuery<System.DateTime?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.DateTime?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.TimeSpan? JetLast(this IEnumerable<System.TimeSpan> arg)
        {
            ObjectQuery<System.TimeSpan> objectQuerySource = arg as ObjectQuery<System.TimeSpan>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.TimeSpan?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.TimeSpan? JetLast(this IEnumerable<System.TimeSpan?> arg)
        {
            ObjectQuery<System.TimeSpan?> objectQuerySource = arg as ObjectQuery<System.TimeSpan?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.TimeSpan?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.DateTimeOffset? JetLast(this IEnumerable<System.DateTimeOffset> arg)
        {
            ObjectQuery<System.DateTimeOffset> objectQuerySource = arg as ObjectQuery<System.DateTimeOffset>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.DateTimeOffset?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.DateTimeOffset? JetLast(this IEnumerable<System.DateTimeOffset?> arg)
        {
            ObjectQuery<System.DateTimeOffset?> objectQuerySource = arg as ObjectQuery<System.DateTimeOffset?>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.DateTimeOffset?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.String JetLast(this IEnumerable<System.String> arg)
        {
            ObjectQuery<System.String> objectQuerySource = arg as ObjectQuery<System.String>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.String>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LAST
        /// </summary>
        [DbFunctionAttribute("Jet", "LAST")]
        public static System.Byte[] JetLast(this IEnumerable<System.Byte[]> arg)
        {
            ObjectQuery<System.Byte[]> objectQuerySource = arg as ObjectQuery<System.Byte[]>;
            if (objectQuerySource != null)
                return ((IQueryable)objectQuerySource).Provider.Execute<System.Byte[]>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod(), Expression.Constant(arg)));
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.ASCII
        /// </summary>
        [DbFunctionAttribute("Jet", "ASCII")]
        public static System.Int32? Ascii(System.String arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.CHAR
        /// </summary>
        [DbFunctionAttribute("Jet", "CHAR")]
        public static System.String Char(System.Int32? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.INSTR
        /// </summary>
        [DbFunctionAttribute("Jet", "INSTR")]
        public static System.Int32? Instr(System.String toSearch, System.String target)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.INSTR
        /// </summary>
        [DbFunctionAttribute("Jet", "INSTR")]
        public static System.Int32? Instr(System.Byte[] toSearch, System.Byte[] target)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.INSTR
        /// </summary>
        [DbFunctionAttribute("Jet", "INSTR")]
        public static System.Int32? Instr(System.String toSearch, System.String target, System.Int32? startLocation)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.INSTR
        /// </summary>
        [DbFunctionAttribute("Jet", "INSTR")]
        public static System.Int32? Instr(System.Byte[] toSearch, System.Byte[] target, System.Int32? startLocation)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.INSTR
        /// </summary>
        [DbFunctionAttribute("Jet", "INSTR")]
        public static System.Int64? Instr(System.String toSearch, System.String target, System.Int64? startLocation)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.INSTR
        /// </summary>
        [DbFunctionAttribute("Jet", "INSTR")]
        public static System.Int64? Instr(System.Byte[] toSearch, System.Byte[] target, System.Int64? startLocation)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LCASE
        /// </summary>
        [DbFunctionAttribute("Jet", "LCASE")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId = "string")]
        public static System.String LCase(System.String stringArg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.STRING
        /// </summary>
        [DbFunctionAttribute("Jet", "STRING")]
        public static System.String String(System.Int32? count, System.String target)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.SPACE
        /// </summary>
        [DbFunctionAttribute("Jet", "SPACE")]
        public static System.String Space(System.Int32? arg1)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.STR
        /// </summary>
        [DbFunctionAttribute("Jet", "STR")]
        public static System.String StringConvert(System.Double? number)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.STR
        /// </summary>
        [DbFunctionAttribute("Jet", "STR")]
        public static System.String StringConvert(System.Decimal? number)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.MID
        /// </summary>
        [DbFunctionAttribute("Jet", "MID")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId = "string")]
        public static System.String Mid(System.String stringArg, System.Int64? start)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.MID
        /// </summary>
        [DbFunctionAttribute("Jet", "MID")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId = "string")]
        public static System.Byte[] Mid(System.Byte[] stringArg, System.Int64? start)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.MID
        /// </summary>
        [DbFunctionAttribute("Jet", "MID")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId = "string")]
        public static System.String Mid(System.String stringArg, System.Int64? start, System.Int64? length)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.MID
        /// </summary>
        [DbFunctionAttribute("Jet", "MID")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId = "string")]
        public static System.Byte[] Mid(System.Byte[] stringArg, System.Int64? start, System.Int64? length)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.ASCW
        /// </summary>
        [DbFunctionAttribute("Jet", "ASCW")]
        public static System.Int32? Ascw(System.String arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.UCASE
        /// </summary>
        [DbFunctionAttribute("Jet", "UCASE")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720:IdentifiersShouldNotContainTypeNames", MessageId = "string")]
        public static System.String UCase(System.String stringArg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.ATN
        /// </summary>
        [DbFunctionAttribute("Jet", "ATN")]
        public static System.Double? Atn(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.ATN
        /// </summary>
        [DbFunctionAttribute("Jet", "ATN")]
        public static System.Double? Atn(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.COS
        /// </summary>
        [DbFunctionAttribute("Jet", "COS")]
        public static System.Double? Cos(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.COS
        /// </summary>
        [DbFunctionAttribute("Jet", "COS")]
        public static System.Double? Cos(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.EXP
        /// </summary>
        [DbFunctionAttribute("Jet", "EXP")]
        public static System.Double? Exp(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.EXP
        /// </summary>
        [DbFunctionAttribute("Jet", "EXP")]
        public static System.Double? Exp(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LOG
        /// </summary>
        [DbFunctionAttribute("Jet", "LOG")]
        public static System.Double? Log(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.LOG
        /// </summary>
        [DbFunctionAttribute("Jet", "LOG")]
        public static System.Double? Log(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.RND
        /// </summary>
        [DbFunctionAttribute("Jet", "RND")]
        public static System.Double? Rnd()
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.RND
        /// </summary>
        [DbFunctionAttribute("Jet", "RND")]
        public static System.Double? Rnd(System.Int32? seed)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.SGN
        /// </summary>
        [DbFunctionAttribute("Jet", "SGN")]
        public static System.Int32? Sgn(System.Int32? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.SGN
        /// </summary>
        [DbFunctionAttribute("Jet", "SGN")]
        public static System.Int64? Sgn(System.Int64? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.SGN
        /// </summary>
        [DbFunctionAttribute("Jet", "SGN")]
        public static System.Decimal? Sgn(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.SGN
        /// </summary>
        [DbFunctionAttribute("Jet", "SGN")]
        public static System.Double? Sgn(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.SIN
        /// </summary>
        [DbFunctionAttribute("Jet", "SIN")]
        public static System.Double? Sin(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.SIN
        /// </summary>
        [DbFunctionAttribute("Jet", "SIN")]
        public static System.Double? Sin(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.SQR
        /// </summary>
        [DbFunctionAttribute("Jet", "SQR")]
        public static System.Double? Sqr(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.SQR
        /// </summary>
        [DbFunctionAttribute("Jet", "SQR")]
        public static System.Double? Sqr(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.TAN
        /// </summary>
        [DbFunctionAttribute("Jet", "TAN")]
        public static System.Double? Tan(System.Double? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.TAN
        /// </summary>
        [DbFunctionAttribute("Jet", "TAN")]
        public static System.Double? Tan(System.Decimal? arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.DATEADD
        /// </summary>
        [DbFunctionAttribute("Jet", "DATEADD")]
        public static System.DateTime? DateAdd(System.String datePartArg, System.Double? number, System.DateTime? date)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.DATEADD
        /// </summary>
        [DbFunctionAttribute("Jet", "DATEADD")]
        public static System.TimeSpan? DateAdd(System.String datePartArg, System.Double? number, System.TimeSpan? time)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.DATEADD
        /// </summary>
        [DbFunctionAttribute("Jet", "DATEADD")]
        public static System.DateTimeOffset? DateAdd(System.String datePartArg, System.Double? number, System.DateTimeOffset? dateTimeOffsetArg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.DATEADD
        /// </summary>
        [DbFunctionAttribute("Jet", "DATEADD")]
        public static System.DateTime? DateAdd(System.String datePartArg, System.Double? number, System.String date)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.DATEDIFF
        /// </summary>
        [DbFunctionAttribute("Jet", "DATEDIFF")]
        public static System.Int32? DateDiff(System.String datePartArg, System.DateTime? startDate, System.DateTime? endDate)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.DATEDIFF
        /// </summary>
        [DbFunctionAttribute("Jet", "DATEDIFF")]
        public static System.Int32? DateDiff(System.String datePartArg, System.TimeSpan? startDate, System.TimeSpan? endDate)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.DATEDIFF
        /// </summary>
        [DbFunctionAttribute("Jet", "DATEDIFF")]
        public static System.Int32? DateDiff(System.String datePartArg, System.TimeSpan? startDate, System.DateTime? endDate)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.DATEDIFF
        /// </summary>
        [DbFunctionAttribute("Jet", "DATEDIFF")]
        public static System.Int32? DateDiff(System.String datePartArg, System.DateTime? startDate, System.TimeSpan? endDate)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.DATEPART
        /// </summary>
        [DbFunctionAttribute("Jet", "DATEPART")]
        public static System.Int32? DatePart(System.String datePartArg, System.DateTime? date)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.DATEPART
        /// </summary>
        [DbFunctionAttribute("Jet", "DATEPART")]
        public static System.Int32? DatePart(System.String datePartArg, System.TimeSpan? date)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.NOW
        /// </summary>
        [DbFunctionAttribute("Jet", "NOW")]
        public static System.DateTime? Now()
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.ISNUMERIC
        /// </summary>
        [DbFunctionAttribute("Jet", "ISNUMERIC")]
        public static System.Int32? IsNumeric(System.String arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.ISDATE
        /// </summary>
        [DbFunctionAttribute("Jet", "ISDATE")]
        public static System.Int32? IsDate(System.String arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Proxy for the function Jet.ISNULL
        /// </summary>
        [DbFunctionAttribute("Jet", "ISNULL")]
        public static System.Int32? IsNull(System.String arg)
        {
            throw new NotSupportedException("This function can only be invoked from LINQ to Entities.");
        }

        /// <summary>
        /// Use the extension method to implement the Between operation
        /// </summary>
        /// <typeparam name="TSource">Type of the entity</typeparam>
        /// <typeparam name="TKey">Type of the return value</typeparam>
        /// <param name="source">The entity used to apply the method</param>
        /// <param name="keySelector">The lambda expression used to get the return value</param>
        /// <param name="low">Low boundary of the return value</param>
        /// <param name="high">High boundary of the return value</param>
        /// <returns>return the IQueryable</returns>
        public static IQueryable<TSource> Between<TSource, TKey>
             (this IQueryable<TSource> source,
              Expression<Func<TSource, TKey>> keySelector,
              TKey low, TKey high) where TKey : IComparable<TKey>
        {
            // Get a ParameterExpression node of the TSource that is used in the expression tree
            ParameterExpression sourceParameter = Expression.Parameter(typeof(TSource));

            // Get the body and parameter of the lambda expression
            Expression body = keySelector.Body;
            ParameterExpression parameter = null;
            if (keySelector.Parameters.Count > 0)
                parameter = keySelector.Parameters[0];

            // Get the Compare method of the type of the return value
            MethodInfo compareMethod = typeof(TKey).GetMethod("CompareTo", new[] { typeof(TKey) });

            // Expression.LessThanOrEqual and Expression.GreaterThanOrEqua method are only used in
            // the numeric comparision. If we want to compare the non-numeric type, we can't directly 
            // use the two methods. 
            // So we first use the Compare method to compare the objects, and the Compare method 
            // will return a int number. Then we can use the LessThanOrEqual and GreaterThanOrEqua method.
            // For this reason, we ask all the TKey type implement the IComparable<> interface.
            Expression upper = Expression.LessThanOrEqual(
                Expression.Call(body, compareMethod, Expression.Constant(high)),
                Expression.Constant(0, typeof(int)));
            Expression lower = Expression.GreaterThanOrEqual(
                Expression.Call(body, compareMethod, Expression.Constant(low)),
                Expression.Constant(0, typeof(int)));

            Expression andExpression = Expression.And(upper, lower);

            // Get the Where method expression.
            MethodCallExpression whereCallExpression = Expression.Call(
                typeof(Queryable),
                "Where",
                new Type[] { source.ElementType },
                source.Expression,
                Expression.Lambda<Func<TSource, bool>>(andExpression,
                new ParameterExpression[] { parameter }));

            return source.Provider.CreateQuery<TSource>(whereCallExpression);
        }

    }
}
